package tw.com.tymbackend.grpc.config;

import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.ServerInterceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import tw.com.tymbackend.grpc.service.GrpcPeopleServiceImpl;
import tw.com.tymbackend.grpc.service.GrpcKeycloakServiceImpl;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import java.io.IOException;

/**
 * gRPC Server ÈÖçÁΩÆÁ±ª
 * 
 * <p>ÂêØÂä® gRPC Server Âπ∂Ê≥®ÂÜåÊúçÂä°</p>
 * 
 * @author TY Team
 * @version 1.0
 */
@Configuration
@ConditionalOnProperty(name = "grpc.enabled", havingValue = "true")
public class GrpcServerConfig {

    private static final Logger logger = LoggerFactory.getLogger(GrpcServerConfig.class);

    @Value("${grpc.port:50051}")
    private int grpcPort;

    @Autowired
    private GrpcPeopleServiceImpl grpcPeopleService;

    @Autowired
    private GrpcKeycloakServiceImpl grpcKeycloakService;

    @Autowired
    private ServerInterceptor loggingInterceptor;

    @Autowired
    private ServerInterceptor authInterceptor;

    @Autowired
    private ServerInterceptor errorHandlingInterceptor;

    @Autowired
    private ServerInterceptor rateLimitInterceptor;

    private Server grpcServer;


    @PostConstruct
    public void start() throws IOException {
        logger.info("üöÄ ÂêØÂä® gRPC ServerÔºåÁ´ØÂè£: {}", grpcPort);

        grpcServer = ServerBuilder.forPort(grpcPort)
                // Ê∑ªÂä† gRPC Interceptor (ÊåâÈ°∫Â∫èÊâßË°å)
                .intercept(rateLimitInterceptor)      // 1. ÈôêÊµÅÊã¶Êà™Âô®
                .intercept(authInterceptor)           // 2. ËÆ§ËØÅÊã¶Êà™Âô®
                .intercept(loggingInterceptor)        // 3. Êó•ÂøóËÆ∞ÂΩïÊã¶Êà™Âô®
                .intercept(errorHandlingInterceptor)  // 4. ÈîôËØØÂ§ÑÁêÜÊã¶Êà™Âô®
                // Ê≥®ÂÜåÊúçÂä°
                .addService(grpcPeopleService.bindService())
                .addService(grpcKeycloakService.bindService())
                .build()
                .start();

        logger.info("‚úÖ gRPC Server Â∑≤ÂêØÂä®Âú®Á´ØÂè£: {}", grpcPort);
        logger.info("üõ°Ô∏è  Â∑≤ÂêØÁî® gRPC Interceptor: RateLimit -> Auth -> Logging -> ErrorHandling");
        logger.info("üì° ÂèØÁî®ÊúçÂä°: PeopleService, KeycloakService");

        // Ê∑ªÂä†ÂÖ≥Èó≠Èí©Â≠ê
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            logger.info("‚èπÔ∏è  ÂÖ≥Èó≠ gRPC Server...");
            GrpcServerConfig.this.stop();
            logger.info("‚úÖ gRPC Server Â∑≤ÂÖ≥Èó≠");
        }));
    }

    @PreDestroy
    public void stop() {
        if (grpcServer != null && !grpcServer.isShutdown()) {
            grpcServer.shutdown();
        }
    }

    @Bean
    public Server grpcServer() {
        return grpcServer;
    }
}
